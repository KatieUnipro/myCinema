<?php

/**
 * @file
 * whats_on.module
 */
/**
 * Implements hook_menu().
 */
function whats_on_menu() {
  // Creating a node to show some debugging
  $items['whats-on'] = array(
      'title' => 'Whats On?',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'page arguments' => array('whats_on_api_integration')
  );
  // Creating a node to show some debugging
    $items['whats-on-cinema'] = array(
        'title' => 'Cinemas',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('access content'),
        'file' => 'whats_on_cinema.inc',
        'type' => MENU_CALLBACK,
        'page arguments' => array('whats_on_cinema_integration')
    );
    $items['whats-on-times'] = array(
        'title' => 'Time',
        'page callback' => 'drupal_get_form',
        'access arguments' => array('access content'),
        'file' => 'whats_on_dates.inc',
        'type' => MENU_CALLBACK,
        'page arguments' => array('whats_on_cineworld')
    );
    $items['near-me'] = array(
        'title' => 'Whats On Near Me',
        'page callback' => 'whats_on_near_me',
        'access arguments' => array('access content'),
        'file' => 'whats_on_near_me.inc',
        'type' => MENU_CALLBACK,
  //     'page arguments' => array()
    );
  return $items;
}

/**
 * Implements whats_on_remove_non_films().
 */
function whats_on_remove_non_films($movie_title){
    // Remove unwanted performances
    $haystack = array (
        'MET Opera',
        'NT LIVE' ,
        'NT Live' ,
        'ROH Royal',
        'Film Festival:',
        'ENO 2015:',
        'Disney On Ice',
        'Ballet',
        'Autism',
        'Unlimited Screening',
        'Met Opera',
        'Theatre Live',
        'Hindi',
        'Tamil'
    );
    $matches = array();
    foreach ($haystack as $search) {
        $matches[] = preg_grep('/'.$search.'/', $movie_title);
    }
   $check = array();
    foreach ($matches as $match) {
        foreach ($match as $m) {
            $check[] = $m;
        }
    }
    $result = array_diff($movie_title, $check);
    return $result;
}

/**
 * Implements hook_form_alter().
 * Returns films if they dont exist in the website
 */

function whats_on_api_integration() {
  // Check we are getting this func
    $movies = drupal_http_request("http://www2.cineworld.co.uk/api/quickbook/films?key=YEyQfFvY");
    if ($movies->code == 200):
        // Decode our response
        $data = drupal_json_decode($movies->data);
        // If this is a movie return true;
        $movie_titles = $data['films'];
        $title = array();
        foreach ($movie_titles as $key => $movie) :
            $movie_title =$movie['title'];
                //whats_on_remove_showing_type($movie['title']);
            if (!in_array($movie_title, $title)) {
                $title[$movie['edi']] = $movie_title;
            }
        endforeach;
        $new_title = whats_on_remove_non_films($title);
        foreach($new_title as $key => $m_title) :
            $movie_exsits = whats_on_check_movie_exists($m_title);
            $movie = '';
            if (!$movie_exsits) :
               $movie = whats_on_api_OMDB(strtolower($m_title));
               whats_on_create_node($movie , 'films' , $key);
            endif;
        endforeach;
    endif;
    return FALSE;
}
/**
 * Return year and title of movie
 */

function whats_on_year_title($m_title){
    $film_title = substr($m_title, 0, -6);
    $count_title =strlen($film_title);
    $count_film =strlen($m_title);

    $year = substr($m_title, $count_title, $count_film);
    $year = str_replace('(' , '' , $year);
    $year = str_replace(')' , '' , $year);

    return array(
        'film_name' => $film_title,
        'film_year' => $year
    );

}

/**
 * Check movie is not already imported
 */
function whats_on_check_movie_exists($movie_title) {
    // Check if movie exists
        $result = db_select('node' , 'n')->fields('n')->condition('title' , $movie_title , '=')->execute()->fetchAssoc();
        if (!empty($result['nid'])) :
            return TRUE;
        else :
            return FALSE;
        endif;

}

/**
 * Get Movie via OMDB API
 */
function whats_on_api_OMDB($title ) {
    // Get response from API
    $year = date('Y');
    $movie_api_request = drupal_http_request(str_replace('%movie_name' , urlencode($title) , 'http://www.omdbapi.com/?t=%movie_name&y='.$year.'&plot=full&r=json'));
  //  dsm($movie_api_request);
    if ($movie_api_request->code == 200):
        // Decode our response
        $data = drupal_json_decode($movie_api_request->data);

        // If this is a movie return true;
        if ($data['Response'] && !empty($data['Year'])) :
            // Check this is a movie
            if ($data['Type'] === 'movie' && $data['Year']  >= date('Y')) :
                dsm($data);
                return $data;

            else :
                return FALSE;
            endif;
        else :
            return FALSE;
        endif;
    endif;
    return FALSE;
}
/**
 * Create new node for new movies
 */
function whats_on_create_node($movie , $machine_name , $film_id){
    //($film_id);
    global $user;
    if (!empty($movie)) :
        $poster = whats_on_poster_image($movie['Poster'] ,  $movie['Title'] , $user->uid);
        if (!whats_on_check_movie_exists($movie['Title'])) :
            if ($movie['Released'] != 'N/A') :
                $release_date = date("Y-m-d", strtotime($movie['Released']));
            else :
                $release_date = date("Y-m-d", strtotime('2015-12-12'));
            endif;
     // Node Content Values
    $node = new stdClass();
    $node->title = $movie['Title'];
    $node->body[LANGUAGE_NONE][0]['value'] = $movie['Plot'];
    $node->field_film_age_restriction[LANGUAGE_NONE][0]['value'] = $movie['Rated'];
    $node->field_film_release_date[LANGUAGE_NONE][0]['value'] = $release_date;
    $node->field_film_teaser_image[LANGUAGE_NONE][0] = (array) $poster;
    $node->field_film_cineworld_id[LANGUAGE_NONE][0]['value'] = $film_id;
    $node->type = $machine_name;
    $node->path = array('pathauto' => TRUE);
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->promote = 0; //(1 or 0): promoted to front page
    $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
    //save the new node
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
     whats_on_cast($node , $movie['Actors']);
    endif;
    endif;

}

/**
 * Creates poster image
 */
function whats_on_poster_image($poster , $title , $user_id) {
    if ($poster == 'N/A') :
        $poster = 'http://www1.cineworld.co.uk/xmedia-cw/img/film.placeholder.poster-md.jpg';
    endif;
    // My Poster Image
    $get_poster = drupal_http_request($poster);
    // Sanitize the title
    $safe_filename = whats_on_san_file($title);
    // Set the file name with the mime ext (.jpg)
    $filename = $safe_filename . substr($poster , strrpos($poster , '.'), strlen($poster));
    // Check we have a image
    if ($get_poster->code == 200) :
        // Save the image
        file_unmanaged_save_data($get_poster->data , file_directory_temp() . '/' . $filename);
        // Set file object
        $file = (object) array(
            'uid' => $user_id,
            'uri' => file_directory_temp() . '/' . $filename,
            'filemime' => file_get_mimetype(file_directory_temp() . '/' . $filename),
            'status' => 1
        );
        // Copy to my public dir
        $file = file_copy($file , 'public://');



        // Return File
        return $file;
    endif;
}
/**
 * Sanitising
 */
function whats_on_san_file($file) {
    $file = preg_replace("([^\w\s\d\-_~,;:\[\]\(\).])", '', $file);
    $file = preg_replace("([\.]{2,})", '', $file);
    $file = str_replace(':' , '' , $file);

    return $file;
}

/**
 * whats_on_cast Returns an array of casts
 */
function whats_on_cast($node , $cast){
    $cast_list = array();
    $cast = explode(',' , $cast);
    if ($cast && $node) :
    foreach ($cast as $key => $name) :
        $field_collection_value = entity_create('field_collection_item', array('field_name' => 'field_film_cast'));
        $field_collection_value->setHostEntity('node', $node);
        $field_collection_value->field_actor_actress_name[LANGUAGE_NONE][0]['value'] = $name;
        // Save field-collection item.
        $field_collection_value->save();
    endforeach;

   else :
       drupal_set_message(t('Please give a valid node'));
    endif;

    return $cast_list;
}
/**
* Removing IMAX, 2D, 3D from titles
**/
function whats_on_remove_showing_type($title){
    $title = str_replace('IMAX 3D - ' , '' , $title);
    $title = str_replace('3D - ' , '' , $title);
    $title = str_replace('2D - ' , '' , $title);
    return $title;
}